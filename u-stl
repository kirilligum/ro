
# vim:ft=sh  nonu

set -o errexit
set -v

# C1 >> C2 
scc '__ (vint{1,2} >> dint{3,4});'
scc '__ ( d23 >> d9);'
scc 'dchar s; s << "efg";  ("ABC" >> s)'

# C1 << C2
scc '__ (v23 << a23); '
scc 's="123";  __ (s << "ABC");'
scc '__ (str("left")<<"RIGHT");'
scc '__ (v23 << "abc");'
#scc '_ (v23 << a23); _ v23;  s="123";  _ (s << "ABC");  _ (str("left")<<"RIGHT");  __ (v23 << "abc");'

#  x << C >> y
scc 'int i,j;  _ (i << d9          >> j);  __ i, j;'
scc 'int i,j;  _ (i << dint{1,2,3} >> j);  __ i, j;'
scc 'int i=200; v0 << 100 << i;  __ v0, (vint() << 100 << i);'

#  x >> C << y
scc '__ ( 1 >> dint{2,3} << 4);'
scc '__ ( 1 >> d23 << 4);'
scc 'int i=1; dint dk; i >> (2 >>  dk);  __ dk, (i >> (2 >> dint()));'

# Set << x 
scc 'int i=200; set<int> st; st << 100 << i;  __ st, (set<int>() << 100 << i);'


# Set << Ct 
scc 'set<char> st;  (st << "11221133")'
scc '(set<char>()       << "11221133")'

#  Pair/Tuple
scc 'auto P = pair<int,float>{1,3.3};  __ P, ++P, P++'
scc 'auto P = tuple<int,float>{1,3.3};  __ P, ++P, P++;'
scc 'auto T = MT(1,2,3);  __ ++T, T++, T;'

scc 'stack<int> s; s << 1 << 2 << 3;  int x;  s >> x;  _ x, s++; __ "", size(s--);'

scc 'deque<int> c{1,2,3};      _ ++c; _ c++; _ c--; __ --c;'
scc 'dint d{1,2};   3 >> d;   d'
#scc 'map<int,int> m;   m<<MP(1,2);  m'
scc -a1		'size(-- -- dint{0,1,2,3,4} -- --)'

# SIZE
scc -a1		'size(stack<int>() << 1<< 2) == 2  &&  size(sint{1,2}) == 2  &&   size(vint{1,2}) == 2 &&  size(MT(1,2)) == 2'
scc -a1		'!!v9  &&  !v0'

# FIND
scc -a1		'v9 % 3  &&  ! (v9 % 33)   &&   vint{1,2,3} % 3   &&  !(  vint{1,2,3} % 33)'
scc -a1		'v9 % vint{3,4}   &&   v9 % vint{}   &&  !(v9 % vint{3,444})'
scc    		'assert(v9 % [](int i){return i==3;}    &&   !(v9 % [](int i){return i==30;}));'
scc -a1		's9 % "bc"  &&   !(s9 % "n/a")'

scc '*(v9 / 3)  = 33; v9'
scc 'copy(v9/2, v9/5, oi)'
scc 'copy(v9/vint{3,4}, v9/vint{8}, oi); endl'

# Ct / x
scc -a3		'*(v9 / 3)'
# Ct / F
scc '__ v9 / [](int i){return i==3;} - +v9;'
# Ct / F (lambdas)
scc '__ *(str("Hello") / [](char c){return c==*"l";});'
# Ct / F (ctype)
scc '*(str("Hello") / islower)'
# Ct %
scc '__ s9 % [](char c){return c==*"b";},  str("Hello") % islower,  str("Hello") % isdigit,  vs9 % str("bb");'



# BEGIN/ END
scc  ' *+v9=-33;  __ *+vint{1,2}, v9;'

# ACCESS
scc '__ size(s9), size(c9), size(a9), size(v9);'
scc '__ ++range(c9), range(a23)++, ++v9;'
scc '__ ++MT(1,2), MT(1,2)++;'

# ERASE
scc 'v9 - (_1%2);  v9'
scc 'v9 - 2;  v9'
scc 'l9 - 2'
scc 'l9 - (_1%2==0)'
scc 'set<int>{1,2,3} - 2'
scc 'm9 - 2'
scc 'm9 - (_1%2)'
scc 'l9-+l9, v9-+v9, m9-+m9, st9-+st9'
scc 'str("abcd") - "bc"'
scc 'v9 - v23' 

scc -a3		"size(str(\"abcd\") - 'b')"
scc -a2		"size(str(\"1abcd2\") - ro::isalpha)"
scc -a3 	"dchar s;   s << \"abcd123\";   s - ro::isalpha;   size(s)"
scc "auto rc9=range(c9);  rc9 - 'b'"
scc "auto rc9=range(c9);  rc9 - rc9/'b'"

# TODO: ri indexing, and op==
#scc "auto rc9=range(c9);  rc9 - rc9/'b'; rc9[1]=='c'"


# GENERICS
scc -a1 'vector<to> V;  V.emplace_back();  back(V).instances'

scc '-DZ=v9'	       		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-vint{2,3},	r-front(r),  r-begin(r)'
scc '-DZ=l9'	       		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-lint{2,3}, 	r-front(r),  r-begin(r)'
scc '-DZ=a9'	       		'_ front(Z)   ,back(Z)   ,size(Z);'
scc '-DZ=c9'	       		'_ front(Z)   ,back(Z)   ,size(Z);'                 
scc '-DZ=cc9'	       		'_ front(Z)   ,back(Z)   ,size(Z);'                 
scc '-DZ=s9'	       		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-str{"12"},	r-front(r),  r-begin(r)'
scc '-DZ=st9'	       		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-set<int>{2,3},r-front(r),  r-begin(r)'
scc '-DZ=range(c9)'    		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-front(r),  r-begin(r)'
scc '-DZ=range(v9)'    		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-front(r),  r-begin(r)'
scc '-DZ=range(l9)'    		'_ front(Z)   ,back(Z)   ,size(Z);  auto r=Z;   r-front(r),  r-begin(r)'
scc '-DZ=range(9)'     		'_ front(Z)   ,back(Z)   ,size(Z);'
scc '-DZ=range(+v9,-v9)'	'_ front(Z)   ,back(Z)   ,size(Z);'
scc '-DZ=range(v9|(_1%2))'	'_ front(Z)   ,back(Z)   ,size(Z);'
scc '-DZ=range(v9*(_1%2))'	'_ front(Z)   ,back(Z)   ,size(Z);'




: '- - - - - - - - - - - - - - - - - - - - - - - -  U-STL passed   - - - - - - - - - - - - - - - - - - - - - - - - -'
