# vim:ft=sh  nonu
set -o errexit
set -v

scc -a10       	'int i=10;  (+ _1)(i)'
scc -a10       	'(+ + _1)(10)'
scc -a10	'(- _1)(2) * (+ - - - + _1)(5)'
scc -a10 	'(_1 +_2)(2,8)'
scc -a10       	'(_1 +_2)(MT(2,4,6))'
scc -a10	'range(5) || (_1 +_2)'
scc -a10       	'(_1 +_1)(5)'

#  var
scc -a10	'var(10)(1, 2)'
scc -a10 	'auto v=var(i); i=10; v(42)'

#  MIXED TYPES
scc -a10	'(_1+2)(8)'
scc -a10	'(8+_1)(2)'
scc -a10	'(8+-_1+4)(2)'
scc -a10	'(_1 -_2)(11,1)'
scc -a1		'(2*_1 + 20/_1 - 30%_1)(10)  == (2*10 + 20/10 - 30%10)'

#  REF-CORRECTNESS
scc -a1		'to t(1);  var(t)(99);  t.instances'
scc -a1		'var(to(1))(99).constructed'
scc -a1		'constant(to(1))(99).instances'
scc -a1	       	'to t(1); _1(t).instances'
scc -a1		'_1(to(1)).instances'
scc -a10	'vint v{10,11}; *((+_1)(v))'
#scc -a10	'vint v{10,11}; ((_1++)(v))=10'
scc -a10 	'int i=0; (_1+=10)(i); i'
scc -a10       	' *((+_1)(vint{10,11}))'

#  PREFIX-1
scc -a10        'vint v{1,2}; ((++_1)(v))=10'
scc -a10        'dint v{1,10}; (++(--_1)(v))'
scc -a1         '(!_1)(false) && (!_1)(0)'
scc -a10 	'int i=10; *(&_1)(i)'


#  POSTFIX-1
scc -a10        'vint v{10,20}; ((_1--)(v)++)'

#  BINARY
scc -a10	'int i=0; (_1+=2)(i); (_1-=1)(i); (_1*=60)(i);  (_1/=2)(i); (_1%=20)(i); i'
scc -a1		'(_1<<2 >> 1 ^ 3)(1)'
scc -a1		'(false || _1 || true )(false)'
scc -a1		'(0 <= _1 &&  _1 < 2  && 1 == _1  && _1 != 2) (1)'

#  MEMBER

# array subscript
scc -a1		'range(9)[1]'
#scc '( ++ + _1)(1)'						# error: lvalue required    TOADD STATIC ASSERT
scc -a1		'(_1[1])(v9) * (_1[1])(vint{0,1,2})'
scc -a1 	'_1[1](range(9))'
# scc '(v9[_1])(1)'						# not fixable:  error: no viable overloaded operator[] for type 'std::vector<int>'
scc -a1		'(range(v9)[_1])(1)'
# scc 		'range(9) * v9[_1]'  				# not fixable
scc -a10	'(range(5) * range(v9)[_1]) || add'
# scc -a10	'(range(5) * range(9)[_1]) || add'		# FIXME: numeric_range with lambda subscript

# with ranges
scc 'v9 | (_1%2)'	 # FIXME for gcc
scc -a45	'v9 || (_1+_2)'
scc -a45	'v9 | var(true) || add'
scc -a1		'v9 || var(true)'
scc -a0		'*+(v9 * _1);'
scc 'range(9) * _1'
scc 'for(auto i: v9 * _1) _ i;'
scc 'range(9) * var(1)'
scc 'range(9) * (_1+0)'
scc 'v9       * (_1+0)'
scc 'v9 * _1'
scc 'v9 * var(1)'

# <<
scc -a1		'(_1 << 1)(v9)++'
scc -a1		'(v9 << _1)(1)++'
# scc '(cout <<  _1)(1); (cout <<  _1)(v9);'	# fix for clang
# scc 'v9 * (cout << _1);'  TOFIX (empty output)

# contentsof
scc        	'*((+_1)(v9))'
scc        	' ((*_1)(+v9))'
# scc 	' ((*+_1)(v9))'						# TOFIX
# scc 'int i=1;  int *p=&i;  int **pp=&p;  (**_1)(pp)'		# TOFIX

#scc 'vector<int*> va; v9 * (va << &_1); __ size(va); for(auto p:va) _ *p; '
#scc 'v9 * (*oi = _1);'  
#scc 'v9 * (cout << _1);'

# function call
#scc '(strlen(_1))("abc")'	# TOFIX


: '- - - - - - - - - - - - - - - - - - - - - -  U-LAMBDA passed   - -- - - - - - - - - - - - - - - - - - - - -'
