set -o errexit
set -v

scc -a10       	'int i=10;  (+ _1)(i)'
scc -a10       	'(+ + _1)(10)'
scc -a10	'(- _1)(2) * (+ - - - + _1)(5)'
scc -a10 	'(_1 +_2)(2,8)'
scc -a10       	'(_1 +_2)(MT(2,4,6))'
scc -a10	'range(5) || (_1 +_2)'
scc -a10       	'(_1 +_1)(5)'

#  var
scc -a10	'var(10)(1, 2)'
scc -a10 	'auto v=var(i); i=10; v(42)'

#  MIXED TYPES
scc -a10	'(_1+2)(8)'
scc -a10	'(8+_1)(2)'
scc -a10	'(8+-_1+4)(2)'
scc -a10	'(_1 -_2)(11,1)'
scc -a1		'(2*_1 + 20/_1 - 30%_1)(10)  == (2*10 + 20/10 - 30%10)'

#  REF-CORRECTNESS
scc -a1		'to t(1);  var(t)(99);  t.created'
scc -a1		'var(to(1))(99).constructed'
scc -a1		'constant(to(1))(99).created'
scc -a1	       	'to t(1); _1(t).created'
scc -a1		'_1(to(1)).created'
scc -a10	'vint v{10,11}; *((+_1)(v))'
#scc -a10	'vint v{10,11}; ((_1++)(v))=10'
scc -a10 	'int i=0; (_1+=10)(i); i'
scc -a10       	' *((+_1)(vint{10,11}))'

#  PREFIX-1
scc -a10        'vint v{1,2}; ((++_1)(v))=10'
scc -a10        'dint v{1,10}; (++(--_1)(v))'
scc -a1         '(!_1)(false) && (!_1)(0)'
scc -a10 	'int i=10; *(&_1)(i)'


#  POSTFIX-1
scc -a10        'vint v{10,20}; ((_1--)(v)++)'

# contentsof
scc        	'*((+_1)(v9))'
scc        	' ((*_1)(+v9))'
#scc 	' ((*+_1)(v9))'		# error

#  BINARY
scc -a10	'int i=0; (_1+=2)(i); (_1-=1)(i); (_1*=60)(i);  (_1/=2)(i); (_1%=20)(i); i'
scc -a1		'(_1<<2 >> 1 ^ 3)(1)'

: '- - - - - - - - - - - - - - - - - - - - - -  U-LAMBDA passed   - -- - - - - - - - - - - - - - - - - - - - -'
